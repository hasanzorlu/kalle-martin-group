#include "Assign04.h"

#include <QPushButton>
#include <rw/common/StringUtil.hpp>
#include <iostream>
#include <fstream>

// needed for VS
#define _USE_MATH_DEFINES
#include <cmath>
#define M_PI       3.14159265358979323846

#include <rws/RobWorkStudio.hpp>

using namespace rw::math;
using namespace rw::common;
using namespace rw::kinematics;
using namespace rw::models;
using namespace rwlibs::drawable;

assign04::assign04():
RobWorkStudioPlugin("Assign04_Group1", QIcon("c:\\pax_icon.png")),
    	_pTestFrame(NULL)
{
	// Initialize the UI graphics generated by QtCreator
	setupUi(this);

    // Connect signals from the ui component to slots implemented by this plugin

	connect(btnOpen ,SIGNAL(pressed()), this, SLOT(clickBtnOpen()) );
}

assign04::~assign04()
{

}

void assign04::initialize() {
    getRobWorkStudio()->stateChangedEvent().add(boost::bind(&assign04::stateChangedListener, this, _1), this);
	_bolUpdating = false;
}

//3
void assign04::open(WorkCell* workcell)
{
	_pWorkCell = workcell;

	//insertFrame("TestFrame"); //CRASH, do it from a button instead.

	// Show WorldFrame
	addRenderFrame(workcell->getWorldFrame(),0.5);
}

void assign04::close() {
}



void assign04::stateChangedListener(const State& state) {

}


void assign04::clickBtnOpen() {
	std::cout << "Selected input file: ";

	QString selectedFilter;
	QString filename = QFileDialog::getOpenFileName(
        this,
        "Open file", // Title
        ".", // Directory
        "All supported ( *.txt )"
        " \n All ( *.* )",
        &selectedFilter);
	std::string file = filename.toStdString();
	const std::string ext = StringUtil::getFileExtension(file);

	if( ext != ".txt" )
		std::cout << "Unsupported file. Must be txt; was: " << ext << std::endl;
	else {
		std::cout << file << std::endl << std::endl;
		std::ifstream infile (file.c_str());
		std::string line;
		if( infile.is_open() ) {
			while (! infile.eof() ) {
				std::getline (infile, line);
				std::cout << line << std::endl;
			}
		}
	}
}

// Inserts a MovableFrame into the workcell with reference to WorldFrame
MovableFrame* assign04::insertFrame(std::string name){

	// Create and add the movable daf frame to WC
	MovableFrame *newFrame = new MovableFrame(name);
    _pWorkCell->getStateStructure()->addDAF(newFrame,_pWorkCell->getWorldFrame());

    // Now this is VERY important; remember to update the WC state structure
    State state = getRobWorkStudio()->getState();
    state = _pWorkCell->getStateStructure()->upgradeState(state);

    //Initialize transformation
    Rotation3D<double> targetR(1,0,0,0,1,0,0,0,1);
	Vector3D<double> targetP(0,0,1.5);
	Transform3D<double> target(targetP,targetR);
	newFrame->setTransform(target,state);

	// Attach frame to the reference frame
	newFrame->attachTo(_pWorkCell->getWorldFrame(),state);
	getRobWorkStudio()->setState(state);

	return newFrame;

}

// Adds a red-green-blue visualization to a frame
void assign04::addRenderFrame(Frame* frame, float scale){

	RenderFrame* pRenderFrame = new RenderFrame(scale);
	Drawable* pRFDrawable = new Drawable(pRenderFrame);

	getRobWorkStudio()->getWorkCellGLDrawer()->addDrawableToFrame(frame, pRFDrawable);

	return;
}

//--------------
// New functions
//--------------

Q_EXPORT_PLUGIN(assign04);
